tosca_definitions_version: tosca_simple_yaml_1_0
  ##########################################################################
  # Copyright (c) 2019 Contributors to the RADON project
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  ##########################################################################

node_types:
  my.nodes.VM.OpenStack:
    derived_from: tosca.nodes.Compute
    properties:
      name:
        type: string
        description: Name that should be given to the VM in OpenStack
      image:
        type: string
        description: OpenStack image id (image names are not accepted)
      flavor:
        type: string
        description: OpenStack flavor id (flavor names are not accepted)
      network:
        type: string
        description: OpenStack network id (network names are not accepted)
      key_name:
        type: string
        description: OpenStack SSH key name that should be placed on the VM

    attributes:
      id:
        type: string
        description: OpenStack id of the VM
      public_address:
        type: string
        description: OpenStack ip of the VM
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          inputs:
            vm_name:  { default: { get_property: [ SELF, name     ] } }
            image:    { default: { get_property: [ SELF, image    ] } }
            flavor:   { default: { get_property: [ SELF, flavor   ] } }
            network:  { default: { get_property: [ SELF, network  ] } }
            key_name: { default: { get_property: [ SELF, key_name ] } }
          implementation: nodetypes/vm/create.yml
        delete:
          inputs:
            id: { default: { get_attribute: [ SELF, id ] } }
          implementation: nodetypes/vm/delete.yml

  radon.nodes.abstract.DataPipeline:
    derived_from: tosca.nodes.Root

  radon.nodes.nifi.Nifi:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      component_version:
        description: The version of Apache Nifi
        required: true
      port:
        description: The port exposed by Apache Nifi
        required: true
        default: 8080
    capabilities:
      host:
        type: tosca.capabilities.Container
        # valid_source_types: [ radon.nodes.nifi.NifiPipeline ]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          inputs: 
            tarball_version: { default: { get_property: [ SELF, component_version ] } }
          implementation: nodetypes/radon/nodes/nifi/NiFiPlatform/files/create.yml
        start:
          implementation: nodetypes/radon/nodes/nifi/NiFiPlatform/files/start.yml
        stop:
          implementation: nodetypes/radon/nodes/nifi/NiFiPlatform/files/stop.yml
        delete:
          inputs:
            tarball_version: { default: { get_property: [ SELF, component_version ] } }
          implementation: nodetypes/radon/nodes/nifi/NiFiPlatform/files/delete.yml
        configure:
          inputs:
            tarball_version: { default: { get_property: [ SELF, component_version ] } }
          implementation: nodetypes/radon/nodes/nifi/NiFiPlatform/files/configure.yml


  radon.nodes.nifi.NiFiPipeline:
    derived_from: radon.nodes.abstract.DataPipeline
    properties:
      template_file:
        type: string
        description: XML implementation of the pipeline
      template_name:
        type: string
        description: name of the pipeline
      cred_file_path:
        type: string
        description: credential file for access and secret key      
      object_name:
        type: string
        description: object name in the process group
    artifacts:
      pipeline_template:
        description: The pipeline template XML file
        type: tosca.artifacts.File
    attributes:
      id:
        type: string
        description: Unique ID of the pipeline
      ids_file:
        type: string
        description: This is a file containing a list of ids in JSON format. This file will be used to start each processor
      pipeline_type:
        type: string
        description: type of the pipeline. e.g. processor, process-groups, inputPorts, RPG etc
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: radon.nodes.nifi.Nifi
          relationship: tosca.relationships.HostedOn
      - connect:
          capability: tosca.capabilities.Endpoint
          node: radon.nodes.nifi.NifiPipeline
          relationship: tosca.relationships.ConnectsTo
          # occurances: [0, 1]
    capabilities:
      connect:
        type: tosca.capabilities.Endpoint
        description: Capability to receive data from other pipeline nodes
        valid_source_type: [ radon.nodes.nifi.NifiPipeline ]
        # occurances: [0, UNBOUNDED]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          inputs: 
            template_file:  { default: { get_property: [ SELF, template_file ] } }  
            template_name:  { default: { get_property: [ SELF, template_name ] } } 
          implementation: nodetypes/radon/nodes/nifi/NiFiPipeline/files/create.yml
        start:
          inputs: 
            # pipeline_id: { default: { get_attribute: [ SELF, id ] } }
            pipeline_type: { default: { get_attribute: [ SELF, pipeline_type ] } }
          implementation: nodetypes/radon/nodes/nifi/NiFiPipeline/files/start.yml
        stop:
          inputs: 
            pipeline_id: { default: { get_attribute: [ SELF, id ] } }
            pipeline_type: { default: { get_attribute: [ SELF, pipeline_type ] } }
          implementation: nodetypes/radon/nodes/nifi/NiFiPipeline/files/stop.yml
        configure: 
          inputs: 
            pipeline_id: { default: { get_attribute: [ SELF, id ] } }
            pipeline_type: { default: { get_attribute: [ SELF, pipeline_type ] } } 
            cred_file_path: { default: { get_property: [ SELF, cred_file_path ] } }
            object_name: { default: { get_property: [ SELF, object_name ] } }   
          implementation: nodetypes/radon/nodes/nifi/NiFiPipeline/files/configure.yml
        delete:
          inputs: 
            pipeline_id: { default: { get_attribute: [ SELF, id ] } }
            pipeline_type: { default: { get_attribute: [ SELF, pipeline_type ] } }
          implementation: nodetypes/radon/nodes/nifi/NiFiPipeline/files/delete.yml



topology_template:

  node_templates:
    vmone:
      type: my.nodes.VM.OpenStack
      properties:
        name: nifihost_utr_chinmaya
        image: d3eeb4ae-9b8c-49ed-8314-123a8a808b2b
        flavor: 6b254b9e-db1c-40de-994c-07d69dd732a6
        network: provider_64_net
        key_name: rem-VM2

    nifi_vmone:
      type: radon.nodes.nifi.Nifi
      requirements:
        - host: vmone
      properties:
        component_version: "1.9.2"

    pipeline1_thumbgen:
      type: radon.nodes.nifi.NiFiPipeline
      requirements:
        - host: nifi_vmone
      properties:
        template_file: /home/chinmaya/Desktop/xopera.new/ChinmayaExp/lambda-thumbGen-TOSCA-datapipeline/files/nifi_thumbgen.xml
        cred_file_path: "/home/chinmaya/Desktop/xopera.new/ChinmayaExp/lambda-thumbGen-TOSCA-datapipeline/files/credentials" 
        object_name: "NifiThumbGen"  
        template_name: "NifiThumbGen"
      artifacts:
        pipeline_template: 
          file: /home/chinmaya/Desktop/xopera.new/ChinmayaExp/lambda-thumbGen-TOSCA-datapipeline/files/nifi_thumbgen.xml




