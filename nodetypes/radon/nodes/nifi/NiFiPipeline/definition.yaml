tosca_definitions_version: tosca_simple_yaml_1_0

##########################################################################
# Copyright (c) 2019 Contributors to the RADON project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################

node_types:
  radon.nodes.nifi.NiFiPipeline:
    derived_from: radon.nodes.abstract.DataPipeline
    properties:
      template_file:
        type: string
        description: XML implementation of the pipeline
      template_name:
        type: string
        description: name of the pipeline
    attributes:
      id:
        type: string
        description: unique id of the pipeline
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: radon.nodes.Nifi
          relationship: tosca.relationships.HostedOn
      - connect:
#          valid_target_type: [ radon.nodes.nifi.NiFiPipeline ]
          relationship: tosca.relationships.ConnectsTo
          capability: tosca.capabilities.Endpoint
#          occurances: [0, UNBOUNDED]
#          description: Need to produce and send data to other pipelines. The number of other pipelines ranges from 0 to infinite
    capabilities:
      connect:
          type: tosca.capabilities.Endpoint
#          valid_source_type: [ radon.nodes.nifi.NiFiPipeline ]
#          occurances: [0, UNBOUNDED]
          description: has the capability fo receiving data from other pipelines. The number of pipelines ranges from 0 to infinite  
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          inputs: 
            template_file:  { default: { get_property: [ SELF, template_file ] } }  
            template_name:  { default: { get_property: [ SELF, template_name ] } }  
          implementation: files/create.yml
        start:
          inputs: 
            id: { default: { get_attribute: [ SELF, id ] } }  
          implementation: files/start.yml
        stop:
          inputs: 
            id: { default: { get_attribute: [ SELF, id ] } }
          implementation: files/stop.yml
        configure: 
          inputs: 
            id: { default: { get_attribute: [ SELF, id ] } }
          implementation: files/configure.yml
        delete:
          inputs: 
            id: { default: { get_attribute: [ SELF, id ] } }
          implementation: files/delete.yml
