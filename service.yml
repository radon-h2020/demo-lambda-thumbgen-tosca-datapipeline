tosca_definitions_version: tosca_simple_yaml_1_0
  ##########################################################################
  # Copyright (c) 2019 Contributors to the RADON project
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  ##########################################################################

node_types:
  radon.nodes.VM.OpenStack:
    derived_from: tosca.nodes.Compute
    properties:
      name:
        type: string
        description: Name that should be given to the VM in OpenStack
      image:
        type: string
        description: OpenStack image id (image names are not accepted)
      flavor:
        type: string
        description: OpenStack flavor id (flavor names are not accepted)
      network:
        type: string
        description: OpenStack network id (network names are not accepted)
      key_name:
        type: string
        description: OpenStack SSH key name that should be placed on the VM
    attributes:
      id:
        type: string
        description: OpenStack id of the VM
      public_address:
        type: string
        description: OpenStack ip of the VM
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              vm_name:  { default: { get_property: [ SELF, name     ] } }
              image:    { default: { get_property: [ SELF, image    ] } }
              flavor:   { default: { get_property: [ SELF, flavor   ] } }
              network:  { default: { get_property: [ SELF, network  ] } }
              key_name: { default: { get_property: [ SELF, key_name ] } }
            implementation: nodetypes/vm/create.yml
          delete:
            inputs:
              id: { default: { get_attribute: [ SELF, id ] } }
            implementation: nodetypes/vm/delete.yml

  radon.nodes.abstract.DataPipeline:
    derived_from: tosca.nodes.Root

  radon.nodes.nifi.Nifi:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      component_version:
        description: The version of Apache Nifi
        type: string
        required: true
      port:
        description: The port exposed by Apache Nifi
        required: true
        type: string
        default: 8080
    capabilities:
      host:
        type: tosca.capabilities.Container
        # valid_source_types: [ radon.nodes.nifi.nifipipeline ]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs: 
              tarball_version: { default: { get_property: [ SELF, component_version ] } }
            implementation: nodetypes/radon/nodes/nifi/nifiplatform/files/create.yml
          start:
            implementation: nodetypes/radon/nodes/nifi/nifiplatform/files/start.yml
          stop:
            implementation: nodetypes/radon/nodes/nifi/nifiplatform/files/stop.yml
          delete:
            inputs:
              tarball_version: { default: { get_property: [ SELF, component_version ] } }
            implementation: nodetypes/radon/nodes/nifi/nifiplatform/files/delete.yml
          configure:
            inputs:
              tarball_version: { default: { get_property: [ SELF, component_version ] } }
            implementation: nodetypes/radon/nodes/nifi/nifiplatform/files/configure.yml

  radon.nodes.nifi.nifipipeline:
    derived_from: radon.nodes.abstract.DataPipeline
    properties:
      template_file:
        type: string
        description: XML implementation of the pipeline
      template_name:
        type: string
        description: name of the pipeline
      cred_file_path:
        type: string
        description: credential file for access and secret key      
      object_name:
        type: string
        description: object name in the process group
    attributes:
      id:
        type: string
        description: Unique ID of the pipeline      
      pipeline_type:
        type: string
        description: type of the pipeline. e.g. processor, process-groups, inputPorts, RPG etc
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: radon.nodes.nifi.Nifi
          relationship: tosca.relationships.HostedOn
      - connectToPipeline:
          capability: tosca.capabilities.Endpoint
          node: radon.nodes.nifi.nifipipeline
          relationship: radon.relationships.datapipelines.ConnectNiFi
          occurrences: [0, 1]
    capabilities:
      connectToPipeline:
        type: tosca.capabilities.Endpoint
        description: Capability to receive data from other pipeline nodes
        valid_source_types: [ radon.nodes.nifi.nifipipeline ]
        occurrences: [0, UNBOUNDED]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs: 
              template_file:  { default: { get_property: [ SELF, template_file ] } }  
              template_name:  { default: { get_property: [ SELF, template_name ] } } 
            implementation: nodetypes/radon/nodes/nifi/nifipipeline/files/create.yml
          start:
            inputs: 
              pipeline_id: { default: { get_attribute: [ SELF, id ] } }
              pipeline_type: { default: { get_attribute: [ SELF, pipeline_type ] } }
            implementation: nodetypes/radon/nodes/nifi/nifipipeline/files/start.yml
          stop:
            inputs: 
              pipeline_id: { default: { get_attribute: [ SELF, id ] } }
              pipeline_type: { default: { get_attribute: [ SELF, pipeline_type ] } }
            implementation: nodetypes/radon/nodes/nifi/nifipipeline/files/stop.yml
          configure: 
            inputs: 
              # pipeline_id: { default: { get_attribute: [ SELF, id ] } }
              # pipeline_type: { default: { get_attribute: [ SELF, pipeline_type ] } } 
              cred_file_path: { default: { get_property: [ SELF, cred_file_path ] } }
              object_name: { default: { get_property: [ SELF, object_name ] } }   
            implementation: nodetypes/radon/nodes/nifi/nifipipeline/files/configure.yml
          delete:
            inputs: 
              pipeline_id: { default: { get_attribute: [ SELF, id ] } }
              pipeline_type: { default: { get_attribute: [ SELF, pipeline_type ] } }
            implementation: nodetypes/radon/nodes/nifi/nifipipeline/files/delete.yml

relationship_types:
   radon.relationships.datapipelines.ConnectNiFi:
     derived_from: tosca.relationships.ConnectsTo
     description: Connecting two nifi data pipelines for forwarding data. The pipelines should be on same server.
     # valid_target_types: [ radon.nodes.nifi.nifipipeline ]     
     interfaces:
       Configure:                 
         operations:
          post_configure_source:
            inputs:
              source_pipeline_id: { default: { get_attribute: [SOURCE, id] } }
              target_pipeline_id: { default: { get_attribute: [TARGET, id] } }
              source_pipeline_server_ip: { default: { get_attribute: [SOURCE, host, host, public_address] } }
              target_pipeline_server_ip: { default: { get_attribute: [TARGET, host, host, public_address] } }
            implementation:
              primary: dp_plugin/connectPipelines.yml



topology_template:

  node_templates:
    vmone:
      type: radon.nodes.VM.OpenStack
      properties:
        name: vmone_centos1
        image: 13a94b11-98ee-43a4-ad29-00ae97e8f790 
        flavor: m2.xsmall
        network: provider_64_net
        key_name: rem-VM2

    vmtwo:
      type: radon.nodes.VM.OpenStack
      properties:
        name: vmtwo_centos2
        image: 13a94b11-98ee-43a4-ad29-00ae97e8f790 
        flavor: m2.xsmall
        network: provider_64_net
        key_name: rem-VM2
      requirements:
        - dependency: vmone      

    # INSTALL and CONFIGURE nifi on this instance
    nifi_vmone:
      type: radon.nodes.nifi.Nifi
      requirements:
        - host: vmone
      properties:
        component_version: "1.11.1"

    # INSTALL and CONFIGURE nifi on this instance
    nifi_vmtwo:
      type: radon.nodes.nifi.Nifi
      requirements:
        - host: vmtwo
      properties:
        component_version: "1.11.1"
       
    # This will RECEIVE the original image and the INVOKE the Lambda function (and receive the result from lambda)
    pipeline2_invokeLmabda:
      type: radon.nodes.nifi.nifipipeline
      requirements:
        - host: nifi_vmtwo
        - connectToPipeline: pipeline3_pushImg
      properties:
        template_file: "/home/opera_0.5.2/EC-review_demo/V1/files/invokeLambda_PG.xml"
        cred_file_path: "/home/opera_0.5.2/EC-review_demo/V1/files/credentials" 
        object_name: "invokeLambda"       
        # template name SHOULD MATCH with the name mentioned in the template file
        template_name: "invokeLambda_PG"


    # this will PUSH the thumbnail image to another bucket
    pipeline3_pushImg:
      type: radon.nodes.nifi.nifipipeline
      requirements:
        - host: nifi_vmtwo 
      properties:
        template_file: "/home/opera_0.5.2/EC-review_demo/V1/files/pushToS3_PG.xml"
        cred_file_path: "/home/opera_0.5.2/EC-review_demo/V1/files/credentials" 
        # below variable name is used only during the configuration
        object_name: "PutS3Object"       
        # template name SHOULD MATCH with the name mentioned in the template file
        template_name: "pushToS3_PG"


    # This will READ the image files from S3 bucket
    pipeline1_getS3Img:
      type: radon.nodes.nifi.nifipipeline
      requirements:
        - host: nifi_vmone
        - connectToPipeline: pipeline2_invokeLmabda
      properties:
        template_file: /home/opera_0.5.2/EC-review_demo/V1/files/readFrmS3_PG.xml
        cred_file_path: "/home/opera_0.5.2/EC-review_demo/V1/files/credentials"
        object_name: "ListS3"
        # template name should match with the name mentioned in the template file
        template_name: "readFrmS3_PG"
